// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
  NA
}

enum Gender {
  hombre
  mujer
  kids
  unisex
  NA
  
}

enum Role {
  admin
  superAmind
  user
}


model Category {
   id   String @id @default(uuid())
   name String @unique
   subCategory SubCategory[]
   Product     Product[]
}

model SubCategory{
   id   String @id @default(uuid())
   name String @unique
   category    Category[]
   Product     Product[]
}



model Product {
  id          String @id @default(uuid())
  title       String
  description String 
  inStock     Int @default(0)
  price       Float @default(0)
  sizes       Size[] @default([])
  slug        String @unique
  tags        String[] @default([])
  gender      Gender
  score       String[] @default([])
  
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  subcategory SubCategory @relation(fields: [subcategoryId],references: [id])
  subcategoryId  String
  //relaciones
  productImage ProductImage[]
 
  
  @@index([gender])

}

model  ProductImage {
  id String @id @default(uuid())
  url String

   ProductImage Product @relation(fields: [ProductId],references: [id])
   ProductId String
}


//MODELO PARA USUARUIS EN BASE DE DATOS 

model Account {
  id                        String  @id @default(uuid())
  userId                    String
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String?  @db.Text
  refresh_token_expires_in  Int?
  access_token              String?  @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?  @db.Text
  session_state             String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  roles         Role      @default(user)
  isActive      Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  userAddress UserAddress?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Countries {
  id   String @unique @id
  name String 


//relaciones 
userAddress UserAddress[]

}

model UserAddress {
  id String   @id @default(uuid())
  firstName   String
  lastName    String
  address     String
  address2    String?
  postalCode  String
  phone       String
  city        String @default("NA")

//relaciones
country       Countries @relation(fields: [countryId],references: [id])
countryId     String

user User @relation(fields: [userId],references: [id])
userId String @unique

}
